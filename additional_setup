#!/bin/bash
ArchitectureSel () {
	case "$(uname -m)" in
		aarch64) ;;
		i686) ;;
		x86_64) ;;
	esac
}


UEFISel () {
	if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]
	then modprobe -r -q efivars || true # if MAC
	else	modprobe -q efivarfs # all others
	fi
	
	if [[ -d "/sys/firmware/efi/" ]]; then	## Mount efivarfs if it is not already mounted
		if (mount | grep /sys/firmware/efi/efivars)
		then mount -t efivarfs efivarfs /sys/firmware/efi/efivars
		fi
	UefiMode=1 && echo "UEFI Mode detected"
	else
	UefiMode=0 && echo "BIOS Mode detected"
	fi
}

CpuSel () {
  CPUT=$(lscpu | awk '/Vendor ID:/ {print $3}')
  case "$CPUT" in
    GenuineIntel) echo "Installing Intel microcode" && microcode=intel-ucode.img ;;
    AuthenticAMD) echo "Installing AMD microcode" && microcode=amd-ucode.img ;;
  esac	
}

GraphicSel () {
  echo " Detecting video chipset "
  GCard=$(lspci | grep VGA)
  GCard_length=$(lspci | grep -c VGA)

  GSel=( 'NVIDIA' 'Intel' 'Advanced' )
  GDriver=( 'NVDriver' 'INDriver' 'AMDriver' )
  DefaultDriver=( 'proprietary' 'mesa' 'amdgpu' )
  SeconDriver=( 'opensource' 'xf86-video-intel' 'ati' )

  t=0
  for i in "${GSel[@]}"; do
  if echo "$GCard" | grep -q "$i"; then
    echo -e " We found an $i graphics card \n Type 1 for ${DefaultDriver[t]} driver \n Type 2 for ${SeconDriver[t]}"
    read -r rr
    case $rr in
      1) eval "${GDriver[t]}"="${DefaultDriver[t]}" ;;
      0) eval "${GDriver[t]}"="${SeconDriver[t]}" ;;
      *) eval "${GDriver[t]}"="${DefaultDriver[t]}" ;;
    esac
  fi
  t=($t+1)
  done
  
  YesNoSel "Install this driver : [ AMD = $AMDriver ] [ INTEL = $INDriver ] [ NVIDIA = $NVDriver ]"
  case "$CC" in
    1) echo OK ;;
    *) echo 'Try to run again' && GraphicSel ;;
  esac
}

SelSteps () {
  OSSelection=( '4' 'Enter the distro we are going to setup : 1) Arch 2) Artix 3) Void \n'
                'OSSel' ''
                '1|Arch|arch' 'distro selected : Arch' 'Arch'
                '2|Artix|artix' 'distro selected : Artix' 'Artix'
                '3|Void|void' 'distro selected : Void' 'Void'
                'echo "Wrong choice, type again" && OperatingSystemSel' )
  
  SelS=( 'OSSelection' 'LocalizationSel' 'LanguageSel' 'TimezoneSel' 
  'HostnameSel' 'UsernameSel' 'PartIDSel' 'FilesystemSel' 'BootloaderSel' )
  for i in "${SelS[@]}"; do
    echo -en "${i[1]}"
    read -r "${i[2]}"
    YesNoSel "${i[3]}"
    case "${i[0]}" in
      2) case "${i[2]}" in
           "${i[4]}") echo "${i[5]}" && eval "${i[2]}"="${i[6]}" ;;
           *) "${i[6]}" ;;
         esac ;;
      3) case "${i[2]}" in
           "${i[4]}") echo "${i[5]}" && eval "${i[2]}"="${i[6]}" ;;
           "${i[7]}") echo "${i[8]}" && eval "${i[2]}"="${i[9]}" ;;
           *) "${i[10]}" ;;
         esac ;;
      4) case "${i[2]}" in
           "${i[4]}") echo "${i[5]}" && eval "${i[2]}"="${i[6]}" ;;
           "${i[7]}") echo "${i[8]}" && eval "${i[2]}"="${i[9]}" ;;
           "${i[10]}") echo "${i[11]}" && eval "${i[2]}"="${i[12]}" ;;
           *) "${i[13]}" ;;
         esac ;;
      *) ;;
    esac
  done
}

Pacman_Locked() {
	if [[ -f $(/var/lib/pacman/db.lck || /mnt/var/lib/pacman/db.lck) ]]; then
		echo -e " !!!ERROR!!! Pacman is blocked. \n We try to remove /var/lib/pacman/db.lck."
		rm /var/lib/pacman/db.lck || /mnt/var/lib/pacman/db.lck
	else echo "No locked database"
	fi
}
