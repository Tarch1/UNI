#!/bin/bash

ArchitectureSel () {
	case "$(uname -m)" in
	aarch64)	;;
	i686)	;;
	x86_64)	;;
	esac
}

UEFIsel () {
	if [[ -d "/sys/firmware/efi/" ]]; then	## Mount efivarfs if it is not already mounted
		if (mount | grep /sys/firmware/efi/efivars)
		then mount -t efivarfs efivarfs /sys/firmware/efi/efivars
		fi
		UEFImode=1 && echo 'UEFI Mode detected'
	else UEFImode=0 && echo 'BIOS Mode detected'
	fi
}

CPUsel () {
	CPUT="$(lscpu | grep -Eo "GenuineIntel|AuthenticAMD")"
	case "$CPUT" in
	GenuineIntel) echo 'Installing Intel microcode' && microcodepkg='intel-ucode' ;;
	AuthenticAMD) echo 'Installing AMD microcode' && microcodepkg='amd-ucode' ;;
	esac	
}

GPUsel () {
	echo " Detecting video chipset "
	Gsel=( VM NVIDIA Intel AMD )
	t=0
######### try lspci | grep VGA | grep -Eo "VM|NVIDIA|Intel|AMD"
	for i in "${Gsel[@]}"; do
		if lspci | grep VGA | grep -q "$i"; then
			YesNoSel " We found an $i graphics card wanna install the relative driver?"
			case $CC in
			1)
				echo 'OK, we install it during the installation'
				if [[ "$i" == Intel ]]; then echo "The default Mesa driver will be installed"
				elif [[ "$i" == NVIDIA ]] || [[ "$i" == nvidia ]]; then
					YesNoSel 'Wanna proprietary driver, if no Mesa is the default for nouveau'
					case "$CC" in
					1) echo 'Setting up Proprietary' && nvidiadrivers=(nvidia nvidia-prime nvidia-settings nvidia-utils lib32-nvidia-utils opencl-nvidia lib32-opencl-nvidia libxnvctrl libvdpau) ;;
					0) echo 'Using default Mesa' && nvidiadrivers=(mesa) ;;
					*) echo "Error with nested YesNoSel funcion" ;;
					esac
				elif [[ "$i" == AMD ]]; then amddrivers=(amdgpu mesa vulkan-radeon libva-mesa-driver mesa-vdpau xf86-video-amdgpu)
				elif [[ "$i" == VM ]]; then VBTsel=1 && echo "The default Mesa driver will be installed"
				else echo "No $i graphics card, skipping"
				fi
			;;
			0) echo 'OK, then go ahead' ;;
			*) echo "Error with YesNoSel funcion" ;;
			esac
		fi
		t=("$t"+1)
	done
}

Pacman_Locked() {
	if [ -f /var/lib/pacman/db.lck ] || [ -f /mnt/var/lib/pacman/db.lck ]; then
		echo -e " !!!ERROR!!! Pacman is blocked. \n We try to remove /var/lib/pacman/db.lck."
		rm -f /var/lib/pacman/db.lck || /mnt/var/lib/pacman/db.lck
	else echo "No locked database"
	fi
}

ArchRepoSetup () {
	local UNIVERSErepo=( '[universe]'
		'Server = https://universe.artixlinux.org/$arch'
		'Server = https://mirror1.artixlinux.org/universe/$arch'
		'Server = https://mirror.pascalpuffke.de/artix-universe/$arch'
		'Server = https://artixlinux.qontinuum.space/artixlinux/universe/os/$arch'
		'Server = https://mirror1.cl.netactuate.com/artix/universe/$arch'
		'Server = https://ftp.crifo.org/artix-universe/' )
	local ArchRepo=( '# Arch' '[extra]' 'Include = /etc/pacman.d/mirrorlist-arch'
		'[community]' 'Include = /etc/pacman.d/mirrorlist-arch'
		'[multilib]' 'Include = /etc/pacman.d/mirrorlist-arch' )
		
	for UR in "${UNIVERSErepo[@]}"; do echo "$UR" >> "$1" ; done
	if [ "$1" = /mnt/etc/pacman.conf ]
	then "$chroot" /mnt "$PKGmanager" -Sy "${pkgskips[@]}" artix-archlinux-support
	else "$PKGmanager" -Sy "${pkgskips[@]}" artix-archlinux-support
	fi
	for AR in "${ArchRepo[@]}"; do echo "$AR" >> "$1" ; done
	"$PKGmanager"-key --populate archlinux
	"$PKGmanager" -Sy
}

AnotherCheck () {
	pacman -Sylq system world galaxy extra community multilib | sort > pacman_db
	echo "${miss[@]}" | tr ' ' '\n' | sort -u > pkg_missed
	mapfile -t unlisted < <(comm -13 pacman_db pkg_missed)
	#IFS=" " read -r -a unlisted <<< "$(comm -13 pacman_db pkg_missed)"
	echo "Unlisted" = "${unlisted[@]}"
}

########## PERSONALIZATION-SCRIPT ##########

VirtualBoxTest () {
  YesNoSel "If this is a Virtualbox installation for test the script, we will skip every choice \n"
  case $CC in
    1) VBTsel=1 && echo "OK, skip all check $VBTSel" ;;
    0) VBTsel=0 && echo "OK, now respond a few question" ;;
    *) echo "Do again please" && VirtualBoxTest ;;
  esac
}

OperatingSystemSel () {
  echo -en "Enter the distro we are going to setup : 1) Arch 2) Artix 3) Void \n"
  read -r OSsel
  case $OSsel in
    1|Arch|arch) OSsel="Arch" && echo "distro selected : Arch" ;;
    2|Artix|artix) OSsel="Artix" && echo "distro selected : Artix" ;;
    3|Void|void) OSsel="Void" && echo "distro selected : Void" ;;
    *) echo "Wrong choice, type again" && OperatingSystemSel ;;
  esac
}

ArchRepoSel () {
	YesNoSel "You want Arch repositories as well as Artix repositories"
  case $CC in
    1) ARCHrepo=1 && echo "OK, adding the repositories of arch" ;;
    0) ARCHrepo='' && echo "Well, trying without them" ;;
    *) echo "Do again please" && ArchRepoSel ;;
  esac
}

VoidInstMethod () {
  echo -en "Enter installation type : 1) XBPS 2) ROOTFS \n"
  read -r VImethod
  case $VImethod in
    1|XBPS|xbps) VImethod="XBPS" && echo 'Selected : XBPS install' ;;
    2|ROOTFS|rootfs) VImethod="ROOTFS" && echo 'Selected : ROOTFS install' ;;
    *) echo "Wrong choice, type again" && VoidInstMethod ;;
  esac
}

LibrarySel () {
  echo -en "Enter base library name : 1) GLIBC 2) MUSL \n"
  read -r LIBsel
  case $LIBsel in
  1|GLIBC|glibc) LIBsel="GLIBC" && echo "Selected : GLIBC" ;;
  2|MUSL|musl) LIBsel="MUSL" && echo "Selected : MUSL" ;;
  *) echo "Wrong choice, type again" && LibrarySel ;;
  esac
}

LocalizationSel () {
  echo -en "Enter localization : 1) en_US.UTF-8 2) en_GB.UTF-8 3) it_IT.UTF-8 \n"
  read -r LOCsel
  case $LOCsel in
    1|en_US|en_US.UTF-8) LOCsel="en_US.UTF-8" && echo "Selected : en_US.UTF-8" ;;
    2|en_GB|en_GB.UTF-8) LOCsel="en_GB.UTF-8" && echo "Selected : en_GB.UTF-8" ;;
    3|it_IT|it_IT.UTF-8) LOCsel="it_IT.UTF-8" && echo "Selected : it_IT.UTF-8" ;;
    *) echo "Wrong choice, type again" && LocalizationSel ;;
  esac
}

LanguageSel () {
  echo -en "Enter preferred Language : 1) en_US.UTF-8 2) en_GB.UTF-8 3) it_IT.UTF-8 \n"
  read -r LANGsel
  case $LANGsel in
    1|en_US|en_US.UTF-8) LANGsel="en_US.UTF-8" && echo "Selected : en_US.UTF-8" ;;
    2|en_GB|en_GB.UTF-8) LANGsel="en_GB.UTF-8" && echo "Selected : en_GB.UTF-8" ;;
    3|it_IT|it_IT.UTF-8) LANGsel="it_IT.UTF-8" && echo "Selected : it_IT.UTF-8" ;;
    *) echo "Wrong choice, type again" && LanguageSel ;;
  esac
}

HostnameSel () {
  read -rp "Enter preferred hostname : " HNsel
  YesNoSel "If << $HNsel >> is the right hostname type y or n for retype it :"
  case $CC in
    1) echo "OK, hostname selected $HNsel" ;;
    *) echo "Then again" && HostnameSel ;;
  esac
}

UsernameSel () {
  read -rp "Enter preferred username : " UNsel
  YesNoSel "If << $UNsel >> is the right hostname type y or n for retype it :"
  case $CC in
    1) echo "OK, username selected $UNsel" ;;
    *) echo "Then again" && UsernameSel ;;
  esac
}

TimezoneSel () {
  echo -en " Select Timezone : 1) Europe/Rome \n or type another with the same format "
  read -r TZsel
  case "$TZsel" in
    1|Europe/Rome|Rome) TZsel="Europe/Rome" && echo "Selected : Europe/Rome" ;;
    q|quit|exit) TZSel="" ;;
    *) YesNoSel "Want this for timezone : $TZsel ?"
       case $CC in
         1) echo "OK, timezone selected $TZsel" ;;
         *) echo "Then again" && TimezoneSel ;;
       esac ;;
  esac
}

PartIDSel () {
  echo -en "Enter partition identifier : 1) UUID 2) PARTUUID 3) LABEL \n"
  read -r PIDsel
  case $PIDsel in
    1|UUID|uuid) PIDsel=UUID && echo "Selected : UUID" ;;
    2|PARTUUID|partuuid) PIDsel=PARTUUID && echo "Selected : PARTUUID" ;;
    3|LABEL|label) PIDsel=LABEL && echo "Selected : LABEL" ;;
    *) echo "Wrong choice, type again" && PartIDSel ;;
  esac
}

FilesystemSel () {
  echo -en "Enter base filesystem : 1) EXT4 2) BTRFS \n"
  read -r FSsel
  case $FSsel in
    1|EXT4|ext4) FSsel=ext4 && echo "Selected : EXT4" ;;
    2|BTRFS|btrfs) FSsel=btrfs && echo "Selected : BTRFS" ;;
    *) echo "Wrong filesystem selected, try one of those provided" && FilesystemSel ;;
  esac
}

BootloaderSel () {
  echo -en "Enter preferred bootloader : 1) Refind 2) Grub 3) Efistub \n"
  read -r BLsel
  case $BLsel in
    1|REFIND|refind) BLsel="refind" && echo "bootloader selected : refind" ;;
    2|GRUB|grub) BLsel="grub" && echo "bootloader selected : grub" ;;
    3|EFISTUB|efistub) BLsel="efistub" && echo "bootloader selected : efistub" ;;
    *) echo "Wrong bootloader selected, try one of those provided" && BootloaderSel ;;
  esac
}

YesNoSel () {
	read -rp "$1 $2 $3 [y/N] " YNS
	case "$YNS" in
	[yY] | [yY][eE][sS]) CC=1 ;;
	[nN] | [nN][oO]) CC=0 ;;
	*) YesNoSel "$1" ;;
	esac
}
