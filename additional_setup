#!/bin/bash
ArchitectureSel () {
	case "$(uname -m)" in
		aarch64) ;;
		i686) ;;
		x86_64) ;;
	esac
}


UEFISel () {
	if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]
	then modprobe -r -q efivars || true # if MAC
	else	modprobe -q efivarfs # all others
	fi
	
	if [[ -d "/sys/firmware/efi/" ]]; then	## Mount efivarfs if it is not already mounted
		if (mount | grep /sys/firmware/efi/efivars)
		then mount -t efivarfs efivarfs /sys/firmware/efi/efivars
		fi
	export UefiMode=1 && echo "UEFI Mode detected"
	else
	export UefiMode=0 && echo "BIOS Mode detected"
	fi
}

CpuSel () {
  CPUT=$(lscpu | awk '/Vendor ID:/ {print $3}')
  case "$CPUT" in
    GenuineIntel) echo "Installing Intel microcode" && export microcode=intel-ucode.img ;;
    AuthenticAMD) echo "Installing AMD microcode" && export microcode=amd-ucode.img ;;
  esac	
}

GraphicSel () {
  echo " Detecting video chipset "
  GCard=$(lspci | grep VGA)
  #GCard_length=$(lspci | grep -c VGA)

  GSel=( 'NVIDIA' 'Intel' 'Advanced' )
  GDriver=( 'NVDriver' 'INDriver' 'AMDriver' )
  DefaultDriver=( 'proprietary' 'mesa' 'amdgpu' )
  SeconDriver=( 'opensource' 'xf86-video-intel' 'ati' )

  t=0
  for i in "${GSel[@]}"; do
  if echo "$GCard" | grep -q "$i"; then
    echo -e " We found an $i graphics card \n Type 1 for ${DefaultDriver[t]} driver \n Type 2 for ${SeconDriver[t]}"
    read -r rr
    case $rr in
      1) eval "${GDriver[t]}"="${DefaultDriver[t]}" ;;
      0) eval "${GDriver[t]}"="${SeconDriver[t]}" ;;
      *) eval "${GDriver[t]}"="${DefaultDriver[t]}" ;;
    esac
  fi
  t=("$t"+1)
  done
  
  YesNoSel "Install this driver : [ AMD = $AMDriver ] [ INTEL = $INDriver ] [ NVIDIA = $NVDriver ]"
  case "$CC" in
    1) echo OK ;;
    *) echo 'Try to run again' && GraphicSel ;;
  esac
}

SelSteps () {
  OSSelection=( '4' 'Enter the distro we are going to setup : 1) Arch 2) Artix 3) Void \n'
                'OSSel' ''
                '1|Arch|arch' 'distro selected : Arch' 'Arch'
                '2|Artix|artix' 'distro selected : Artix' 'Artix'
                '3|Void|void' 'distro selected : Void' 'Void'
                'echo "Wrong choice, type again" && OperatingSystemSel' )
  
  SelS=( 'OSSelection[@]' ) ## LocalizationSel 'LanguageSel' 'TimezoneSel' 
  ## 'HostnameSel' 'UsernameSel' 'PartIDSel' 'FilesystemSel' 'BootloaderSel' )
  for i in "${SelS[@]}"; do
    var=("${!i}")
    echo -en "${var[1]}"
    read -r "${var[2]}"
    #YesNoSel "${var[3]}"
    case "${var[2]}" in
      2) case "${var[2]}" in
           "${var[4]}") echo "${var[5]}" && eval "${var[2]}"="${var[6]}" ;;
           *) "${var[6]}" ;;
         esac ;;
      3) case "${var[2]}" in
           "${var[4]}") echo "${var[5]}" && eval "${var[2]}"="${var[6]}" ;;
           "${var[7]}") echo "${var[8]}" && eval "${var[2]}"="${var[9]}" ;;
           *) "${var[10]}" ;;
         esac ;;
      4) case "${var[2]}" in
           "${var[4]}") echo "${var[5]}" && eval "${var[2]}"="${var[6]}" ;;
           "${var[7]}") echo "${var[8]}" && eval "${var[2]}"="${var[9]}" ;;
           "${var[10]}") echo "${var[11]}" && eval "${var[2]}"="${var[12]}" ;;
           *) "${var[13]}" ;;
         esac ;;
      *) ;;
    esac
    echo doned ${var[2]}
  done
}

Pacman_Locked() {
	if [[ -f $(/var/lib/pacman/db.lck || /mnt/var/lib/pacman/db.lck) ]]; then
		echo -e " !!!ERROR!!! Pacman is blocked. \n We try to remove /var/lib/pacman/db.lck."
		rm /var/lib/pacman/db.lck || /mnt/var/lib/pacman/db.lck
	else echo "No locked database"
	fi
}

########## PERSONALIZATION-SCRIPT ##########

VirtualBoxTest () {
  YesNoSel "If this is a Virtualbox installation for test the script, we will skip every choice -- Type yes or no -- "
  case $CC in
    1) echo "OK, skip all check $VBTSel" && VBTSel=1 ;;
    0) echo "OK, now respond a few question" && VBTSel='' ;;
    *) echo "Do again please" && VirtualBoxTest ;;
  esac
}

OperatingSystemSel () {
  echo -en "Enter the distro we are going to setup : 1) Arch 2) Artix 3) Void \n"
  read -r OSSel
  case $OSSel in
    1|Arch|arch) echo "distro selected : Arch" && OSSel="Arch" ;;
    2|Artix|artix) echo "distro selected : Artix" && OSSel="Artix" ;;
    3|Void|void) echo "distro selected : Void" && OSSel="Void" ;;
    *) echo "Wrong choice, type again" && OperatingSystemSel ;;
  esac
}

DiskSel () {
  echo -en "\n Enter the disk you want to use : \n"
  lsblk -dplnx size -o name,size
  read -r DSel
  YesNoSel "If $DSel is the right disk type y or n for retype it : "
  case $CC in
    1) echo "OK, disk selected $DSel" ;;
    *) echo "Then again" && DiskSel ;;
  esac
}

VoidInstMethod () {
  echo -en "Enter installation type : 1) XBPS 2) ROOTFS \n"
  read -r VIMethod
  case $VIMethod in
    1|XBPS|xbps) echo 'Selected : XBPS install' && VIMethod="XBPS" ;;
    2|ROOTFS|rootfs) echo 'Selected : ROOTFS install' && VIMethod="ROOTFS" ;;
    *) echo "Wrong choice, type again" && VoidInstMethod ;;
  esac
}

LibrarySel () {
  echo -en "Enter base library name : 1) GLIBC 2) MUSL \n"
  read -r LibSel
  case $LibSel in
  1|GLIBC|glibc) echo "Selected : Arch" && LibSel="GLIBC" ;;
  2|MUSL|musl) echo "Selected : Artix" && LibSel="MUSL" ;;
  *) echo "Wrong choice, type again" && LibrarySel ;;
  esac
}

LocalizationSel () {
  echo -en "Enter localization : 1) en_US.UTF-8 2) en_GB.UTF-8 3) it_IT.UTF-8 \n"
  read -r LocSel
  case $LocSel in
    1|en_US|en_US.UTF-8) echo "Selected : en_US.UTF-8" && LocSel="en_US.UTF-8" ;;
    2|en_GB|en_GB.UTF-8) echo "Selected : en_GB.UTF-8" && LocSel="en_GB.UTF-8" ;;
    3|it_IT|it_IT.UTF-8) echo "Selected : it_IT.UTF-8" && LocSel="it_IT.UTF-8" ;;
    *) echo "Wrong choice, type again" && LocalizationSel ;;
  esac
}

LanguageSel () {
  echo -en "Enter preferred Language : 1) en_US.UTF-8 2) en_GB.UTF-8 3) it_IT.UTF-8 \n"
  read -r LangSel
  case $LangSel in
    1|en_US|en_US.UTF-8) echo "Selected : en_US.UTF-8" && LangSel="en_US.UTF-8" ;;
    2|en_GB|en_GB.UTF-8) echo "Selected : en_GB.UTF-8" && LangSel="en_GB.UTF-8" ;;
    3|it_IT|it_IT.UTF-8) echo "Selected : it_IT.UTF-8" && LangSel="it_IT.UTF-8" ;;
    *) echo "Wrong choice, type again" && LanguageSel ;;
  esac
}

HostnameSel () {
  read -rp "Enter preferred hostname : " HNSel
  YesNoSel "If [ $HNSel ] is the right hostname type y or n for retype it :"
  case $CC in
    1) echo "OK, hostname selected $HNSel" ;;
    *) echo "Then again" && HostnameSel ;;
  esac
}

UsernameSel () {
  read -rp "Enter preferred username : " UNSel
  YesNoSel "If [ $UNSel ] is the right hostname type y or n for retype it :"
  case $CC in
    1) echo "OK, username selected $UNSel" ;;
    *) echo "Then again" && UsernameSel ;;
  esac
}

TimezoneSel () {
  echo -en " Select Timezone : 1) Europe/Rome \n or type another with the same format "
  read -r TZSel
  case $TZSel in
    1|Europe/Rome|Rome) echo "Selected : Europe/Rome" && TZSel="Europe/Rome" ;;
    q|quit|exit) TZSel="" ;;
    *) YesNoSel "Want this for timezone : $TZSel ?"
       case $CC in
         1) echo "OK, timezone selected $TZSel" ;;
         *) echo "Then again" && TimezoneSel ;;
       esac ;;
  esac
}

PartIDSel () {
  echo -en "Enter partition identifier : 1) UUID 2) PARTUUID 3) LABEL \n"
  read -r PIDSel
  case $PIDSel in
    1|UUID|uuid) echo "Selected : UUID" && PIDSel=UUID ;;
    2|PARTUUID|partuuid) echo "Selected : PARTUUID" && PIDSel=PARTUUID ;;
    3|LABEL|label) echo "Selected : LABEL" && PIDSel=LABEL ;;
    *) echo "Wrong choice, type again" && PartIDSel ;;
  esac
}

FilesystemSel () {
  echo -en "Enter base filesystem : 1) EXT4 2) BTRFS \n"
  read -r FSSel
  case $FSSel in
    1|EXT4|ext4) echo "Selected : EXT4" && FSSel=Ext4Format ;;
    2|BTRFS|btrfs) echo "Selected : BTRFS" && FSSel=BtrfsFormat ;;
    *) echo "Wrong filesystem selected, try one of those provided" && FilesystemSel ;;
  esac
}

BootloaderSel () {
  echo -en "Enter preferred bootloader : 1) Refind 2) Grub 3) Efistub \n"
  read -r BLSel
  case $BLSel in
    1|REFIND|refind) BLSel="refind" && echo "bootloader selected : refind" ;;
    2|GRUB|grub) BLSel="grub" && echo "bootloader selected : grub" ;;
    3|EFISTUB|efistub) BLSel="efistub" && echo "bootloader selected : efistub" ;;
    *) echo "Wrong bootloader selected, try one of those provided" && BootloaderSel ;;
  esac
}

YesNoSel () {
  read -rp "$1 $2 $3 [y/N] " YNS
  case "$YNS" in 
    [yY] | [yY][eE][sS]) CC=1 ;;
    [nN] | [nN][oO]) CC=0 ;;
    *) YesNoSel "$1" ;;
  esac
}

#UEFISel
#CPUSel
#GraphicSel
#SelSteps
