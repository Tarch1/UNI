#!/bin/bash
if [ "$(id -u)" -ne 0 ]; then echo 'Please run as root.' >&2; exit 1; fi

SHOWerror () {
	echo "$1" >> Errors 
	YesNoSel "Found an error in $1 would you like to continue the installation?"
	case $CC in
	1) echo "OK, still going, see Errors file in this directory" ;;
	*) echo "OK, then exit" && exit 1 ;;
	esac
}

Check_required_files () {
	local files=( additional_setup full_setup Bootloader/Refind/{refind.conf,refind_linux.conf,themes/Blur-theme/theme.conf}
			Bootloader/Grub-Eiffel/{theme.txt,select_c.png,select_e.png,select_w.png,eiffel_tower_under_construction.png,icons/arch.png} )
	for a in "${files[@]}"; do if [ ! -f "$(pwd)/$a" ]; then echo "Missing required file: $a" && local miss+=("$a"); fi
	done
	if [[ -v miss ]]; then echo 'Required file(s):' "${miss[@]}"
	else source additional_setup ; fi
}

DiskPartition () {
	swapoff -a
	umount -R /mnt
	"$PKGmanager" -Sy "${pkgskips[@]}" "${fs[@]}"
	mapfile -t devicelist < <(lsblk -dplnx size -o name | grep -Ev "boot|rpmb|loop" | tac)
	mapfile -t devicesize < <(lsblk -dplnx size -o size | grep -Ev "boot|rpmb|loop" | tac)
	DRIVE="$(dialog --stdout --menu "Select OS INSTALLATION drive" 0 0 0 "${devicelist[0]}" "${devicesize[0]}" "${devicelist[1]}" "${devicesize[1]}" || exit 1)"
	[[ "$VBTsel" = 0 ]] && ADDITIONAL_DRIVE="$(dialog --stdout --menu "Select ADDITIONAL drive" 0 0 0 "${devicelist[0]}" "${devicesize[0]}" "${devicelist[1]}" "${devicesize[1]}" || exit 1)"
	umount "$DRIVE"?*
	sgdisk -ozZ "$DRIVE"
	parted -sf "$DRIVE" mktable gpt mkpart "ESP" 0% 1% mkpart "LINUX-HOME" 1% 100% set 1 esp on set 2 linux-home on
	if echo "$DRIVE" | grep "^/dev/[a-z]d[a-z]"; then
	BOOT_PART="$DRIVE"1 && ROOT_PART="$DRIVE"2 && DEVICE="${DRIVE#/*/}"
	elif echo "$DRIVE" | grep "^/dev/nvme"; then
	BOOT_PART="$DRIVE"p1 && ROOT_PART="$DRIVE"p2 && DEVICE="${DRIVE#/*/}" #printf -v BOOT_PART "%sp1" "$DRIVE"
	elif echo "$DRIVE" | grep "^/dev/mmc"; then
	BOOT_PART="$DRIVE"1 && ROOT_PART="$DRIVE"2 && DEVICE="${DRIVE#/*/}"
	fi
	echo DRIVE="$DRIVE" DEVICE="$DEVICE" && if [[ -z $DRIVE || -z $DEVICE ]]; then exit 1 ;
	else echo 'We can proceed with the formatting of file system' ; fi
	BOOTID="$(blkid -s "$PIDsel" -o value "$BOOT_PART")"
	ROOTID="$(blkid -s "$PIDsel" -o value "$ROOT_PART")"
	echo BP="$BOOT_PART" RP="$ROOT_PART" PID="$PIDsel"
	echo "${PIDsel}"_BOOT="$BOOTID" "${PIDsel}"_ROOT="$ROOTID"
	echo -e " ${PIDsel}_BOOT=$BOOTID \n ${PIDsel}_ROOT=$ROOTID"
	lsblk -f
}

FileSystemFormat () {
	BootLabel='EFI'
	RootLabel='ROOT'
	mkfs.fat -F32 -n "$BootLabel" "$BOOT_PART"
	echo -e "$PIDsel=$BOOTID /boot vfat defaults 0 2" > UNIfstab
	
	case "$FSsel" in
	ext4)
		mkfs.ext4 -L "$RootLabel" "$ROOT_PART"
		mount "$ROOT_PART" /mnt
		echo -e "$PIDsel=$ROOTID / ext4 defaults 0 1" >> UNIfstab
	;;
	btrfs)
		modules=(btrfs)
		binaries='\/usr\/bin\/btrfsck'
		local SUBVolumes=( 'home' 'var_log' 'snapshots' )
		local options='noatime,compress=lzo,space_cache=v2' #default use the default options: rw, suid, dev, exec, auto, nouser, and async.
		mkfs.btrfs -fL "$RootLabel" "$ROOT_PART" #-f option to force overwrite filesystem
		
		mount "$ROOT_PART" /mnt
		btrfs su cr /mnt/@
		for b in "${SUBVolumes[@]}"; do	btrfs su cr /mnt/@"$b"; done
		umount /mnt
		mount -o defaults,"$options",subvol=@ "$ROOT_PART" /mnt
		echo -e "$PIDsel=$ROOTID / btrfs $options,subvol=@$c 0 0" >> UNIfstab
		for c in "${SUBVolumes[@]}"; do
			if [[ "$c" == snapshots ]]; then
				mkdir -p /mnt/."$c"
				mount -o "$options",discard=async,subvol=@"$c" "$ROOT_PART" /mnt/."$c"
				echo -e "$PIDsel=$ROOTID /.$c btrfs $options,discard=async,subvol=@$c 0 0" >> UNIfstab
			elif [[ "$c" == var_log ]]; then
				mkdir -p /mnt/var/log
				mount -o "$options",subvol=@"$c" "$ROOT_PART" /mnt/var/log
				echo -e "$PIDsel=$ROOTID /var/log btrfs $options,subvol=@$c 0 0" >> UNIfstab
			else
				mkdir -p /mnt/"$c" && mount -o defaults,"$options",subvol=@"$c" "$ROOT_PART" /mnt/"$c"
			fi
			echo -e "$PIDsel=$ROOTID /$c btrfs $options,subvol=@$c 0 0" >> UNIfstab
		done
	;;
	*)	echo boh
	;;
	esac
	mkdir /mnt/boot
	mount "$BOOT_PART" /mnt/boot
	lsblk -f
}

AdditionalDriveSetup () {
	if [ -v "$ADDITIONAL_DRIVE" ]; then
	mkdir -p /mnt/run/"$HNsel"/media/{HDD,USB}
	mount "$ADDITIONAL_DRIVE" /mnt/run/"$HNsel"/media/HDD
	fi
}

BaseSystemInstall () {
	local BasePKG=( "${baselinux[@]}"  "${elogind[@]}" "${btrfspkg[@]}" )
	if [ "$FSsel" = btrfs ]; then BasePKG+=( "${btrfsutility[@]}" ); fi
	"$PKGstrap" /mnt "${microcode[@]}" "${BasePKG[@]}"
}

FStabGen () {
	mv -f /mnt/etc/fstab /mnt/etc/old-fstab
	if [[ "$OSsel" = Void ]]; then cp UNIfstab /mnt/etc/fstab
	elif [ -v PIDsel ]; then "$fstabgen" -t "$PIDsel" /mnt >> /mnt/etc/fstab
	else exit 1
	fi
	cat /mnt/etc/fstab
}

SetupEnvironment () {
	#sed -i "/$LOCsel/ s/#//g" /mnt/etc/locale.gen
	sed -i "/\($LOCsel\|$LANGsel\)/ s/#//g" /mnt/etc/locale.gen
	echo -e "LANG=$LANGsel \nLANGUAGE=$LOCsel \nLC_TIME=$LOCsel \nLC_ADDRESS=$LOCsel \nLC_MESSAGES=$LOCsel \nLC_CTYPE=C" >> /mnt/etc/locale.conf
	echo "$keylayout" | tee /mnt/"$keypath" /mnt/etc/vconsole.conf
	"chroot" /mnt ln -sf /usr/share/zoneinfo/"$TZsel" /etc/localtime && hwclock --systohc --utc && locale-gen
	#echo -e "HARDWARECLOCK=$HARDWARECLOCK \nKEYMAP=$KEYMAP \nFONT=$FONT \nTTYS=$TTYS" >> /mnt/etc/rc.conf
	echo "$HNsel" >> /mnt/etc/hostname
	echo -e " $HNsel \n 127.0.0.1 localhost \n ::1 localhost \n 127.0.1.1 $HNsel.localdomain $HNsel" >> /mnt/etc/hosts
}

PackageConfig () {
	"$chroot" /mnt "$PKGmanager" -Sy
	case "$OSsel" in
	1|arch|Arch)	sed -i '/\[multilib]/,/mirrorlist/ s/#//' /mnt/etc/pacman.conf ;;
	2|artix|Artix)	sed -i '/\[lib32]/,/mirrorlist/ s/#//' /mnt/etc/pacman.conf
		if [ "$ARCHrepo" = 1 ]; then ArchRepoSetup /mnt/etc/pacman.conf ; fi
	;;
	3|void|Void)	;;
	*)	echo "No distro selected, there is a problem with additional_setup, exiting..." && exit 1 ;;
	esac
	sed -i '/\(Color\|ParallelDownloads\)/ s/#//' /mnt/etc/pacman.conf
	sed -i '/ParallelDownloads/a ILoveCandy' /mnt/etc/pacman.conf
}

PackageInstall () {
	local EssentialPKG=( "${microcode[@]}"  "${baseutils[@]}" "${bootloaderutility[@]}" "${fs[@]}" "${amddrivers[@]}" "${nvidiadrivers[@]}"  "${net[@]}" )
	local AdditionalPKG=( "${audio[@]}" "${bluetooth[@]}" "${android[@]}" "${print[@]}" "${utility[@]}" "${hardwareacceleration[@]}" "${vulkan[@]}" "${vulkanlib32[@]}" "${apps[@]}" )
	local ExtraPKG=( "${filemanager[@]}" "${archive[@]}" "${xorg[@]}" )
	if [[ "$VBTsel" = 1 ]]; then "$chroot" /mnt "$PKGmanager" -Syu "${pkgskips[@]}" "${EssentialPKG[@]}"
	else "$chroot" /mnt "$PKGmanager" -Syu "${pkgskips[@]}" "${EssentialPKG[@]}" "${AdditionalPKG[@]}"
	fi
	if [[ -v nvidiadrivers ]]; then 
		ln -s /dev/null /etc/udev/rules.d/61-gdm.rules
		modules+=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)
	fi
	sed -i "/MODULES/ s/()/(${modules[*]})/" /mnt/etc/mkinitcpio.conf
	sed -i "/BINARIES/ s/()/($binaries)/" /mnt/etc/mkinitcpio.conf
	mkinitcpio -p linux
}

ServiceSetup () {
	Services=( NetworkManager openrc-settingsd cupsd avahi-daemon )
	for s in "${Services[@]}"; do "$chroot" /mnt "$initc0" "$initc1" "$s" ; done
}

UserSetup () {
	"$chroot" /mnt useradd -mG wheel,video,audio,storage,input "$UNsel" #,lp,scanner,power
	sed -i '/%wheel ALL=(ALL:ALL) ALL/ s/#//' /mnt/etc/sudoers #it's possible to use the username instead of %wheel
	"$chroot" /mnt echo -n "Type $UNsel "
	"$chroot" /mnt passwd "$UNsel"
	"$chroot" /mnt echo -n "Type root "
	"$chroot" /mnt passwd
	mkdir -p /mnt/home/"$UNsel"/.config
}

AudioSetup () {
	echo -e "options nvidia-drm modeset=1\noptions nvidia NVreg_UsePageAttributeTable=1\noptions nvidia NVreg_EnablePCIeGen3=1" >> /mnt/etc/modprobe.d/nvidia.conf
	echo "options snd-intel-dspcfg dsp_driver=1" >> /mnt/etc/modprobe.d/dsp.conf
	#cp -r /mnt/usr/share/pipewire /mnt/etc/
}

BootloaderSetup () {
	case "$BLsel" in
	1|REFIND|Refind|refind)
		"$chroot" /mnt "$PKGmanager" -Sy "${pkgskips[@]}" "${refindpkg[@]}"
		"$chroot" /mnt refind-install
		sed -i "/ucode.img/ s/ucode/$microcodepkg/g" ../UNI/Bootloader/Refind/refind_linux.conf
		mkdir /mnt/boot/EFI/refind/themes
		mv /mnt/boot/EFI/refind/refind.conf /mnt/boot/EFI/refind/backup-refind.conf
		mv /mnt/boot/refind_linux.conf /mnt/boot/backup-refind_linux.conf
		cp ../UNI/Bootloader/Refind/refind.conf /mnt/boot/EFI/refind/refind.conf
		cp ../UNI/Bootloader/Refind/refind_linux.conf /mnt/boot/refind_linux.conf
		cp -r ../UNI/Bootloader/Refind/themes/* /mnt/boot/EFI/refind/themes/
		echo '!!!Refind config and theme changed!!!'
	;;
	2|GRUB|Grub|grub)
		if [ "$FSsel" = btrfs ]; then grubpkg+=("${grubbtrfs[@]}"); fi
		case "$UEFImode" in
		0)
			"$chroot" /mnt "$PKGmanager" -Sy "${pkgskips[@]}" "${GrubPKG[@]}"
			"$chroot" /mnt grub-install --target=i386-pc --recheck --debug /boot
		;;
		*)
			"$chroot" /mnt "$PKGmanager" -Sy "${pkgskips[@]}" "${GrubPKG[@]}"
			"$chroot" /mnt grub-install --target=x86_64-efi --efi-directory=/boot bootloader-id=GRUB
		;;
		esac
		mkdir -p /mnt/boot/grub/themes
		sed -i "/GRUB_DISABLE_OS_PROBER=/ s/#//g" /mnt/etc/default/grub
		sed -i '/GRUB_THEME=/c GRUB_THEME="/boot/grub/themes/Grub-Sekiro/theme.txt"' /mnt/etc/default/grub
		"$chroot" /mnt grub-mkconfig -o /boot/grub/grub.cfg
		cp -r ../UNI/Bootloader/Grub-Sekiro /mnt/{boot/grub/themes/,/usr/share/grub/themes}
	;;
	3|EFISTUB|Efistub|efistub)
		BLflags="\'rw root=$PIDsel=$ROOTID rootflags=subvol=@ initrd=\$microcodepkg.img initrd=\initramfs-linux.img quiet loglevel=3'"
		#"$chroot" /mnt efibootmgr -d "$BOOT_PART" -p 1 -c -L "$OSsel" -l /vmlinuz-linux -u "root=$PIDsel=$ROOTID resume=PARTUUID= initrd=/intel-ucode.img initrd=/initramfs-linux.img rw console=tty2 quiet loglevel=3 rd.udev.log_priority=0" --verbose
		"$chroot" /mnt efibootmgr -d "$BOOT_PART" -p 1 -c -L "$OSsel" -l /vmlinuz-linux -u "$BLflags" --verbose
		echo "efibootmgr -b lastnumber -B" #delete previous boot entries
	;;
	*)	exit 1
	;;
	esac
}

########## INSTALLATION-PROCESS ##########

InstallationSetup () {
	echo 'List of all errors during the installation progress:' > Errors
	Check_required_files &&	UEFIsel && CPUsel && GPUsel && Pacman_Locked
	
	if [[ "$VBTsel" = 1 ]]; then
		Personalization=( OperatingSystemSel ArchRepoSel )
		LANGsel='en_GB.UTF-8' && LOCsel='it_IT.UTF-8'
		HNsel=tarch1 && UNsel=tarch1
		TZsel='Europe/Rome'
		PIDsel=UUID &&	FSsel=btrfs
		BLsel=refind
		ArchTixSteps=( 'DiskPartition' 'FileSystemFormat' 'BaseSystemInstall' 'FStabGen' 'SetupEnvironment' 'PackageConfig' 'PackageInstall' 'ServiceSetup' 'UserSetup' 'BootloaderSetup' )
	else
		local Personalization=( 'OperatingSystemSel' 'ArchRepoSel' 'LocalizationSel' 'LanguageSel' 'TimezoneSel' 'HostnameSel' 'UsernameSel' 'PartIDSel' 'FilesystemSel' 'BootloaderSel' )
		ArchTixSteps=( 'DiskPartition' 'FileSystemFormat' 'AdditionalDriveSetup' 'BaseSystemInstall' 'FStabGen' 'SetupEnvironment' 'PackageConfig' 'PackageInstall' 'ServiceSetup' 'UserSetup' 'AudioSetup' 'BootloaderSetup' )
	fi
	#VoidSteps=(  )
	
	for s in "${Personalization[@]}"; do "$s" || SHOWerror "$s" ; done
	
	case "$OSsel" in
	1|Arch|arch)
		PKGmanager=pacman
		pkgskips=( --needed --noconfirm )
		keylayout='KEYMAP=it'
		keypath='etc/vconsole.conf'
		PKGstrap=pacstrap
		fstabgen=genfstab
		chroot='arch-chroot'
		initc0=systemctl
		initc1=enable
		sed -i 's/-openrc//g' ../UNI/full_setup
		sed -i '/\[multilib]/,/mirrorlist/ s/#//' /etc/pacman.conf
		pacman -Sylq core extra community multilib | sort > pacman_db
		PKGcheck
		for a in "${ArchTixSteps[@]}"; do "$a" || SHOWerror "$a" ; done
	;;
	2|Artix|artix)
		PKGmanager=pacman
		pkgskips=( --needed --noconfirm )
		keylayout='KEYMAP=it'
		keypath='etc/conf.d/keymaps'
		PKGstrap=basestrap
		fstabgen=fstabgen
		chroot='artix-chroot'
		initc0='rc-update'
		initc1=add
		sed -i '/\[lib32]/,/mirrorlist/ s/#//' /etc/pacman.conf
		if [ "$ARCHrepo" = 1 ]; then
		ArchRepoSetup /etc/pacman.conf
		pacman -Sylq system world galaxy lib32 universe extra community multilib | sort > pacman_db
		else pacman -Sylq system world galaxy lib32 | sort > pacman_db
		fi
		PKGcheck
		for a in "${ArchTixSteps[@]}"; do "$a" || SHOWerror "$a" ; done
	;;
	3|Void|void)
		echo 'nothing here'
	;;
	*)
	;;
	esac
	FinishInst
}

FinishInst () {
	echo -e " INSTALLATION COMPLETED \n A copy of the script will be placed in your user home directory"
	cp "$(pwd)"/Conf_files/bashrc /mnt/home/"$UNsel"/.bashrc
	cp -r "$(pwd)" /mnt/home/"$UNsel"/
	echo 'export MOZ_ENABLE_WAYLAND=1' > /mnt/home/"$UNsel"/.profile
	cat Errors
	YesNoSel "Reboot system"
	case "$CC" in
	1)	umount "$DRIVE"?* && reboot ;;
	0)	echo 'OK' && exit 0 ;;
	*)	echo 'Not a good answer' && YesNoSel "Reboot system" ;;
	esac
}

PKGcheck () {
	microcode=("$microcodepkg")
	#amdgraphics=("${amddrivers[@]}")
	#nvidiagraphics=("${nvidiadrivers[@]}")
	baselinux=(base base-devel linux linux-firmware linux-headers)
	baseutils=(man bash-completion kitty vim nano wget git)
	fs=(dialog mtools parted gptfdisk dosfstools ntfs-3g gvfs-mtp)
	bootloaderutility=(efibootmgr os-prober sbsigntools)
	elogind=(elogind elogind-openrc openrc-settingsd)
	btrfsutility=(snapper btrfs-progs)
	grubbtrfs=(grub-btrfs)
	grubpkg=(grub)
	refindpkg=(refind)
	net=(networkmanager iwd chrony chrony-openrc networkmanager-openrc)
	audio=(pipewire pipewire-pulse pipewire-alsa pipewire-jack lib32-pipewire lib32-pipewire-jack wireplumber) #void bluetooth = libspa-bluetooth  #pulseaudio pulseaudio-bluetooth pavucontrol ##pulseaudio-alsa alsa-utils , for wine use (lib32-libpulse lib32-alsa-plugins)
	android=(android-tools android-udev)
	bluetooth=(bluez bluez-utils bluez-plugins bluez-openrc)
	print=(cups cups-pdf system-config-printer avahi avahi-openrc cups-openrc)
	xorg=(xorg-server xorg-xinit xorg-xinit light numlockx libinput xorg-xinput xss-lock)
	apps=(telegram-desktop firefox)
	utility=(feh calc fd bpytop adriconf fwupd) #for netwotk test bmon
	hardwareacceleration=(libva-mesa-driver mesa-vdpau intel-media-driver vkd3d)
	vulkan=(vulkan-icd-loader vulkan-intel vulkan-mesa-layers)
	vulkanlib32=(lib32-vulkan-icd-loader lib32-mesa lib32-vulkan-intel)
	filemanager=(xed vifm pcmanfm tumbler raw-thumbnailer file-roller)
	archive=(bzip2 cpio gzip xz lzop p7zip tar unrar zip unzip) # Moved on Aur: atool lha

	ProgressBar=0
	y=" microcode amddrivers nvidiadrivers baselinux baseutils fs bootloaderutility btrfsutility
	elogind	grubpkg grubbtrfs refindpkg net audio bluetooth android print apps utility
	hardwareacceleration vulkan vulkanlib32 filemanager archive xorg "

	for a in $y; do
		var="$a"'[@]'   #the y element with a [@] to be like an array
		temp=${!var}  #splitting the every y[@] element inside temp to simulate a subarray
		for b in $temp; do   #for every element of subarr temp  
			if ! pacman -Ss ^"$b"$ 1>/dev/null; then  #check if doesn't exist
				echo "[x] Package not available: $b from $var"
				miss+=("$b")    #add missing element to new array miss
			else new+=("$b")
			fi
			ProgressBar=$((ProgressBar+1))
			echo -ne '['"$ProgressBar"'%]\r'
		done
		unset "$a"
		IFS=" " read -r -a "${a?}" <<< "${new[@]}"
		unset new
	done
	echo 'miss=' "${miss[@]}"
	for c in $y; do
		local d="$c"'[@]'
		echo "$c=""${!d}"
	done
	if [[ -v miss ]]; then
		echo "${miss[@]}" | tr ' ' '\n' | sort -u > pkg_missed
		local i=0 ; while (( "$i" < "${#miss[@]}" )); do echo "${miss[i]}" && i="$((i+1))"; done
		YesNoSel "Are these packages important to the installation process? We will make a copy of it in /home/*user*/UNI after installation   -- Type yes or no -- "
		case $CC in
		1) echo "OK, we break the installation, edit packages at the end of this file" && exit 0 ;;
		0) echo "OK, skip those packages and proceed with the installation" ;;
		*) echo "Do again please" && PkgMissed ;;
		esac
	fi
}
InstallationSetup
cat Errors
