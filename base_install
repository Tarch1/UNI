#!/bin/bash

########## INSTALLATION-SCRIPT ##########

CheckAS () {
  if [[ -f "$(pwd)/additional_setup" ]]; then
    source additional_setup
  else
    echo "Missing file: additional_setup"
    exit 1
  fi
}

DiskPartition () {
  umount -R /mnt 
  "$pkgmanager" -Sy $pkgskips parted gptfdisk mtools ntfs-3g dialog
  devicelist="$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)"
  DRIVE="$(dialog --stdout --menu "Select disk for installation" 0 0 0 ${devicelist} || exit 1)"
  EXT_DRIVE="$(dialog --stdout --menu "Select EXTERNAL disk" 0 0 0 ${devicelist} || exit 1)"
  ##parted -s "mklabel gpt mkpart ESP fat32 1MiB 512MiB mkpart root ext4 512MiB 100% set 1 esp on"
  #parted -s "$DRIVE" mklabel gpt mkpart "EFI system partition" 0% 1% set 1 esp on mkpart "root partition" 1% 100% set 1 esp on
  echo "$DRIVE"
  sgdisk --zap-all \
  --clear \
  --new=1:0:+550M --typecode=1:ef00 \
  --new=2:0:0 --typecode=2:8300 \
  "$DRIVE"
  sgdisk --verify "$DRIVE"
  if echo "$DRIVE" | grep "^/dev/[a-z]d[a-z]"; then DEVICE="sda"
  elif echo "$DRIVE" | grep "^/dev/nvme"; then DEVICE="nvme"
  elif echo "$DRIVE" | grep "^/dev/mmc"; then DEVICE="mmc"
  fi
  case $DEVICE in
  nvme) BOOT_PART="$DRIVE"p1 && ROOT_PART="$DRIVE"p2 ;;
  sda) BOOT_PART="$DRIVE"1 && ROOT_PART="$DRIVE"2 ;;
  mmc) BOOT_PART="$DRIVE"1 && ROOT_PART="$DRIVE"2 ;;
  esac
  eval "$PIDSel"_BOOT="$(blkid -s "$PIDSel" -o value "$BOOT_PART")"
  eval "$PIDSel"_ROOT="$(blkid -s "$PIDSel" -o value "$ROOT_PART")"
  echo "$BOOT_PART $ROOT_PART $UUID_BOOT $UUID_ROOT"
}

BootFormat () {
  bootlabel="EFI"
  rootlabel="ROOT"
  mkfs.fat -F32 -n "$bootlabel" "$BOOT_PART"
  #mlabel -i "$BOOT_PART" ::"$bootlabel"
}

RootFormat () {
  case "$FSSel" in
    Ext4Format)
    mkfs.ext4 "$ROOT_PART" "$rootlabel"
    #e2label "$ROOT_PART" "$rootlabel"
    mount "$ROOT_PART" /mnt
    ;;
    BtrfsFormat)
    mkfs.btrfs -f -L "$rootlabel" "$ROOT_PART"
    btrfsdep="snapper btrfs-progs"
    modules="btrfs"
    #btrfs filesystem label "$ROOT_PART" "$rootlabel"
    mount "$ROOT_PART" /mnt
    SubVol=('@' '@home' '@snapshots')
    for b in "${SubVol[@]}"; do
      btrfs su cr /mnt/"$b"
    done
    umount /mnt
    mount -o noatime,compress=lzo,space_cache=v2,subvol=@ "$ROOT_PART" /mnt
    mkdir -p /mnt/{home,.snapshots}
    mount -o noatime,compress=lzo,space_cache=v2,subvol=@home "$ROOT_PART" /mnt/home
    mount -o noatime,compress=lzo,space_cache=v2,discard=async,subvol=@snapshots "$ROOT_PART" /mnt/.snapshots
    ;;
    *)
    ;;
  esac
  mkdir /mnt/boot
  mount "$BOOT_PART" /mnt/boot
  lsblk -f
}

ExternalDriveSetup () {
  if [[ "$EXT_DRIVE" == "" ]]; then echo 'No secondary drive to setup'
  else
  sudo ntfsfix /dev/sda1
  mkdir -p /mnt/media/{internal_hdd,USB}
  mount "$EXT_DRIVE" /mnt/media/internal_hdd
  fi
}

BaseSystemInstall () {
  local BasePKG=( $linux $init $btrfsdep $elogind ) 
  "$pkgstrap" /mnt $microcode
  "$pkgstrap" /mnt "${BasePKG[@]}"
  rm /mnt/etc/fstab
  case "$PIDSel" in
  UUID) "$fstabgen" -U /mnt >> /mnt/etc/fstab ;;
  PARTUUID) "$fstabgen" -t PARTUUID /mnt >> /mnt/etc/fstab ;;
  LABEL) "$fstabgen" -L /mnt >> /mnt/etc/fstab ;;
  *) "$fstabgen" -U /mnt >> /mnt/etc/fstab ;;
  esac
  cat /mnt/etc/fstab
}

SyncTime () {
  "$chroot" /mnt ln -sf /usr/share/zoneinfo/"$TZSel" /etc/localtime
  "$chroot" /mnt hwclock --systohc --utc
  #RcConf=("HARDWARECLOCK=$HARDWARECLOCK" "KEYMAP=$KEYMAP" "FONT=$FONT" "TTYS=$TTYS")
  #for rc in "${RcConf[@]}"; do
  #echo "$rc" >> /mnt/etc/rc.conf
  #done
}

LocaleGen () {
  sed -i "/$LocSel/ s/#//g" /mnt/etc/locale.gen
  "$chroot" /mnt locale-gen
  echo "LANG=$LangSel" >> /mnt/etc/locale.conf
  echo "$keylayout" >> /mnt/"$keypath"
}

HostConfig () {
  echo -e " $HNSel \n 127.0.0.1 localhost \n ::1 localhost \n 127.0.1.1 $HNSel.localdomain $HNSel" >> /mnt/etc/hosts
}

PackageConfig () {
  echo "$OSSel"
  case "$OSSel" in
    1|Arch|arch)
      "$chroot" /mnt pacman -Syu $pkgskips
      "$chroot" /mnt pacman-key --init
      "$chroot" /mnt pacman-key --populate archlinux
      sed -i '/\[multilib],/mirrorlist/ s/#//' /mnt/etc/pacman.conf
    ;;
    2|Artix|artix)
      "$chroot" /mnt pacman -Syu $pkgskips artix-archlinux-support
      "$chroot" /mnt pacman-key --populate archlinux
      RepoList=("[extra]" "Include = /etc/pacman.d/mirrorlist-arch" "[community]" "Include = /etc/pacman.d/mirrorlist-arch" "[multilib]" "Include = /etc/pacman.d/mirrorlist-arch")
      for p in "${RepoList[@]}"; do
        echo "\"$p\"" >> /mnt/etc/pacman.conf
      done
      #sed -i '/\[lib32]/,/mirrorlist/ s/#//' /mnt/etc/pacman.conf
    ;;
    3|Void|void)
      echo -e "nothing"
    ;;
    *)
      echo "Wrong distro selected, try again" && OperatingSystemSel && PackageConfig
    ;;
    esac
}

PackageInstall () {
  EssentialPKG=( $dev $fs $net $audio $filemanager $baseutils $media $rcpacks )
  AdditivePKG=( $vulkan $hardwareacceleration $nvidiagraphics $print $apps $bluetooth $android $archive )
  ExtraPKG=( $xorg $filemanager $media )
  "$chroot" /mnt "$pkgmanager" -Syu "$pkgskips" "${EssentialPKG[@]}"
  #"$chroot" /mnt "$pkgmanager" -Syu 
  #cp ../UNI/Conf_files/mkinitcpio.conf /mnt/etc
  sed -i "/MODULES/ s/()/($modules)/" /mnt/etc/mkinitcpio.conf
}

ServiceEnabler () {
  #"$chroot" /mnt << EOF
  ServiceSel=('NetworkManager' 'cupsd' 'avahi-daemon')
  for c in  "${ServiceSel[@]}"; do
  "$chroot" /mnt "$initc0" "$initc1" "$c" "$initc2"
  done
  #keymaps
  #"$chroot" /mnt tlp start || true
}

AudioSetup () {
  ###echo "options snd-hda-intel model=auto" | sudo tee -a /mnt/etc/modprobe.d/alsa-base.conf
  ###echo "blacklist snd_soc_skl" | sudo tee -a /mnt/etc/modprobe.d/blacklist.conf
  ##echo "options snd-hda-intel dmic_detect=0" | sudo tee -a /mnt/etc/modprobe.d/alsa-base.conf
  echo "options snd-intel-dspcfg dsp_driver=1" >> /mnt/etc/modprobe.d/dsp.conf
  cp -r /usr/share/pipewire /etc/
}

UserSetup () {
  "$chroot" /mnt useradd -mG wheel,video,storage,input,lp,scanner,power "$UNSel"
  sed -i '/%wheel ALL=(ALL) ALL/ s/# //' /mnt/etc/sudoers
  sed -i 's/"us"/"it"/' /etc/conf.d/keymaps
  "$chroot" /mnt echo -n "Type password for $UNSel : "
  "$chroot" /mnt passwd "$UNSel"
  "$chroot" /mnt echo -n "Type password for root user : "
  "$chroot" /mnt passwd 
  cp ../UNI/Conf_files/bashrc /mnt/home/"$UNSel"
  cp -r ../UNI /mnt/home/"$UNSel"
  touch /mnt/home/"$UNSel"/.profile
  echo 'export MOZ_ENABLE_WAYLAND=1' >> /mnt/home/"$UNSel"/.profile
}

BootloaderInstall () {
  echo "$BLSel"
  case $BLSel in
    1|REFIND|refind)
      "$chroot" /mnt "$pkgmanager" -Sy $pkgskips refind
      "$chroot" /mnt refind-install
      mkdir /mnt/boot/EFI/refind/themes
      mv /mnt/boot/EFI/refind/refind.conf /mnt/boot/EFI/refind/backup-refind.conf
      mv /mnt/boot/refind_linux.conf /mnt/boot/backup-refind_linux.conf
      cp ../UNI/Bootloader/Refind/refind.conf /mnt/boot/EFI/refind/refind.conf
      cp ../UNI/Bootloader/Refind/refind_linux.conf /mnt/boot/refind_linux.conf
      cp -r ../UNI/Bootloader/Refind/Refind-theme /mnt/boot/EFI/refind/themes/
    ;;
    2|GRUB|grub)
      "$chroot" /mnt "$pkgmanager" -Sy $pkgskips grub grub-btrfs
      case "$UefiMode" in
        1) "$chroot" /mnt grub-install --target=x86_64-efi --efi-directory=/boot bootloader-id=GRUB ;;
        0) "$chroot" /mnt grub-install --target=i386-pc --recheck --debug /boot ;;
        *) "$chroot" /mnt grub-install --target=x86_64-efi --efi-directory=/boot bootloader-id=GRUB ;;
      esac  
      mkdir -p /mnt/boot/grub/themes
      sed -i '$ a\GRUB_THEME="/boot/grub/themes/Grub-Eiffel/theme.txt"' /mnt/etc/default/grub
      "$chroot" /mnt grub-mkconfig -o /boot/grub/themes
      cp -r ../UNI/Bootloader/Grub-Eiffel /mnt/boot/grub/themes/
    ;;
    3|EFISTUB|efistub)
      uuid="$(blkid -s "$PIDSel" -o value "$ROOT_PART")"
      BFlags="\'rw root=$PIDSel=$uuid rootflags=subvol=@ initrd=\intel-ucode.img initrd=\initramfs-linux.img\'"
      "$chroot" /mnt efibootmgr -c -d "$BOOT_PART" -p 1 -L "$OSSel" -l /vmlinuz-linux -u "$BFlags"--verbose
      echo "efibootmgr -b lastnumber -B" #delete previous boot entries
    ;;
    *)
      echo "Wrong bootloader selected, try another" && BootLoaderSel && BootloaderInstall
      echo "done"
    ;;
    esac
}

########## PERSONALIZATION-SCRIPT ##########

VirtualBoxTest () {
  YesNoSel "If this is a Virtualbox installation for test the script, we will skip every choice -- Type yes or no -- "
  case $CC in
    1) echo "OK, skip all check $VBTSel" && VBTSel=1 ;;
    0) echo "OK, now respond a few question" && VBTSel='' ;;
    *) echo "Do again please" && VirtualBoxTest ;;
  esac
}

OperatingSystemSel () {
  echo -en "Enter the distro we are going to setup : 1) Arch 2) Artix 3) Void \n"
  read -r OSSel
  case $OSSel in
    1|Arch|arch) echo "distro selected : Arch" && OSSel="Arch" ;;
    2|Artix|artix) echo "distro selected : Artix" && OSSel="Artix" ;;
    3|Void|void) echo "distro selected : Void" && OSSel="Void" ;;
    *) echo "Wrong choice, type again" && OperatingSystemSel ;;
  esac
}

DiskSel () {
  echo -en "\n Enter the disk you want to use : \n"
  lsblk -dplnx size -o name,size
  read -r DSel
  YesNoSel "If $DSel is the right disk type y or n for retype it : "
  case $CC in
    1) echo "OK, disk selected $DSel" ;;
    *) echo "Then again" && DiskSel ;;
  esac
}

VoidInstMethod () {
  echo -en "Enter installation type : 1) XBPS 2) ROOTFS \n"
  read -r VIMethod
  case $VIMethod in
    1|XBPS|xbps) echo "Selected : Arch" && VIMethod="XBPS" ;;
    2|ROOTFS|rootfs) echo "Selected : Artix" && VIMethod="ROOTFS" ;;
    *) echo "Wrong choice, type again" && VoidInstMethod ;;
  esac
}

LibrarySel () {
  echo -en "Enter base library name : 1) GLIBC 2) MUSL \n"
  read -r LibSel
  case $LibSel in
  1|GLIBC|glibc) echo "Selected : Arch" && LibSel="GLIBC" ;;
  2|MUSL|musl) echo "Selected : Artix" && LibSel="MUSL" ;;
  *) echo "Wrong choice, type again" && LibrarySel ;;
  esac
}

LocalizationSel () {
  echo -en "Enter localization : 1) en_US.UTF-8 2) en_GB.UTF-8 3) it_IT.UTF-8 \n"
  read -r LocSel
  case $LocSel in
    1|en_US|en_US.UTF-8) echo "Selected : en_US.UTF-8" && LocSel="en_US.UTF-8" ;;
    2|en_GB|en_GB.UTF-8) echo "Selected : en_GB.UTF-8" && LocSel="en_GB.UTF-8" ;;
    3|it_IT|it_IT.UTF-8) echo "Selected : it_IT.UTF-8" && LocSel="it_IT.UTF-8" ;;
    *) echo "Wrong choice, type again" && LocalizationSel ;;
  esac
}

LanguageSel () {
  echo -en "Enter preferred Language : 1) en_US.UTF-8 2) en_GB.UTF-8 3) it_IT.UTF-8 \n"
  read -r LangSel
  case $LangSel in
    1|en_US|en_US.UTF-8) echo "Selected : en_US.UTF-8" && LangSel="en_US.UTF-8" ;;
    2|en_GB|en_GB.UTF-8) echo "Selected : en_GB.UTF-8" && LangSel="en_GB.UTF-8" ;;
    3|it_IT|it_IT.UTF-8) echo "Selected : it_IT.UTF-8" && LangSel="it_IT.UTF-8" ;;
    *) echo "Wrong choice, type again" && LanguageSel ;;
  esac
}

HostnameSel () {
  read -rp "Enter preferred hostname : " HNSel
  YesNoSel "If [ $HNSel ] is the right hostname type y or n for retype it :"
  case $CC in
    1) echo "OK, hostname selected $HNSel" ;;
    *) echo "Then again" && HostnameSel ;;
  esac
}

UsernameSel () {
  read -rp "Enter preferred username : " UNSel
  YesNoSel "If [ $UNSel ] is the right hostname type y or n for retype it :"
  case $CC in
    1) echo "OK, username selected $UNSel" ;;
    *) echo "Then again" && UsernameSel ;;
  esac
}

TimezoneSel () {
  echo -en " Select Timezone : 1) Europe/Rome \n or type another with the same format "
  read -r TZSel
  case $TZSel in
    1|Europe/Rome|Rome) echo "Selected : Europe/Rome" && TZSel="Europe/Rome" ;;
    q|quit|exit) TZSel="" ;;
    *) YesNoSel "Want this for timezone : $TZSel ?"
       case $CC in
         1) echo "OK, timezone selected $TZSel" ;;
         *) echo "Then again" && TimezoneSel ;;
       esac ;;
  esac
}

PartIDSel () {
  echo -en "Enter partition identifier : 1) UUID 2) PARTUUID 3) LABEL \n"
  read -r PIDSel
  case $PIDSel in
    1|UUID|uuid) echo "Selected : UUID" && PIDSel=UUID ;;
    2|PARTUUID|partuuid) echo "Selected : PARTUUID" && PIDSel=PARTUUID ;;
    3|LABEL|label) echo "Selected : LABEL" && PIDSel=LABEL ;;
    *) echo "Wrong choice, type again" && PartIDSel ;;
  esac
}

FilesystemSel () {
  echo -en "Enter base filesystem : 1) EXT4 2) BTRFS \n"
  read -r FSSel
  case $FSSel in
    1|EXT4|ext4) echo "Selected : EXT4" && FSSel=Ext4Format ;;
    2|BTRFS|btrfs) echo "Selected : BTRFS" && FSSel=BtrfsFormat ;;
    *) echo "Wrong filesystem selected, try one of those provided" && FilesystemSel ;;
  esac
}

BootloaderSel () {
  echo -en "Enter preferred bootloader : 1) Refind 2) Grub 3) Efistub \n"
  read -r BLSel
  case $BLSel in
    1|REFIND|refind) BLSel="refind" && echo "bootloader selected : refind" ;;
    2|GRUB|grub) BLSel="grub" && echo "bootloader selected : grub" ;;
    3|EFISTUB|efistub) BLSel="efistub" && echo "bootloader selected : efistub" ;;
    *) echo "Wrong bootloader selected, try one of those provided" && BootloaderSel ;;
  esac
}

########## INSTALLATION-PROCESS ##########

YesNoSel () {
  read -rp "$1 $2 $3 [y/N] " YNS
  case "$YNS" in 
    [yY] | [yY][eE][sS]) CC=1 ;;
    [nN] | [nN][oO]) CC=0 ;;
    *) YesNoSel "$1" ;;
  esac
}

BaseInstallation () {
  local SelectionSteps=( 'OperatingSystemSel' 'LocalizationSel' 'LanguageSel' 'TimezoneSel' 
  'HostnameSel' 'UsernameSel' 'PartIDSel' 'FilesystemSel' 'BootloaderSel' )
  
  local ArchTixSteps=( 'DiskPartition' 'BootFormat' 'RootFormat' 'ExternalDriveSetup' 
  'BaseSystemInstall' 'SyncTime' 'LocaleGen' 'HostConfig' 'PackageConfig' 'PackageInstall' 
  'ServiceEnabler' 'AudioSetup' 'UserSetup' 'BootloaderInstall' )
  
  local VoidSteps=( 'VoidInstMethod' 'DiskPartition' 'BootFormat' 'RootFormat' 'ExternalDriveSetup' )
  
  VirtualBoxTest
  if [ "$VBTSel" = 1 ]; then 
  SelectionSteps=('OperatingSystemSel')
  LangSel="en_GB.UTF-8" 
  LocSel="en_GB.UTF-8" 
  HNSel=tarch1 
  UNSel=tarch1 
  TZSel="Europe/Rome" 
  PIDSel="UUID" 
  FSSel=BtrfsFormat 
  BLSel="refind"
  fi
  
  for s in "${SelectionSteps[@]}"; do
  "$s"
  done
  
  case "$OSSel" in
    1|Arch|arch) 
    pkgmanager=pacman
    pkgskips='--needed --noconfirm'
    keylayout='KEYMAP=it'
    keypath="etc/vconsole.conf"
    pkgstrap=pacstrap
    fstabgen=genfstab
    chroot='arch-chroot'
    initc0=systemctl
    initc1=enable
    initc2=""
    sed -i 's/lightdm-openrc//' ../UNI/full_setup
    sed -i 's/gdm-openrc//' ../UNI/full_setup
    for a in "${ArchTixSteps[@]}"; do "$a"
    done
    ;;
    2|Artix|artix)
    pkgmanager=pacman
    pkgskips='--needed --noconfirm'
    keylayout='KEYMAP="it"'
    keypath='etc/conf.d/keymaps'
    pkgstrap=basestrap
    fstabgen=fstabgen
    chroot='artix-chroot'
    init=openrc
    initc0='rc-update'
    initc1=add
    initc2=default
    rcpacks="$rc"
    elogind='elogind elogind-openrc'
    pacman-key --init
    pacman-key --populate artix
    pacman -Sy $pkgskips artix-archlinux-support #lib32-artix-archlinux-support
    for a in "${ArchTixSteps[@]}"; do "$a"
    done
    ;;
    3|Void|void) 
    pkgmanager="xbps-install"
    for a in "${VoidSteps[@]}"; do "$a"
    done
    ;;
    *) echo "Wrong choice, type again" && OperatingSystemSel
    ;;
  esac 
}
FinishInst () {
  echo "INSTALL COMPLETED"
  echo -e " A copy of the script will be placed in your user home directory"
  cp -R "$(pwd)" /mnt/home/"$UNSel"/
  YesNoSel "Reboot system"
  case "$CC" in
    1) umount -R /mnt && reboot ;;
    0) echo "OK" && exit 0 ;;
    *) echo "Wrong choice" && YesNoSel "Reboot system" ;;
  esac
}

########## PACKAGE ##########

microcode='intel-ucode'
linux='base base-devel linux linux-firmware'
init=''
dev='wget git ntp linux-headers'
baseutils='man bash-completion kitty vim nano'
fs='efibootmgr os-prober mtools parted dosfstools sbsigntools ntfs-3g gvfs-mtp'
net='networkmanager network-manager-applet'
audio='pipewire pipewire-pulse pipewire-alsa pipewire-jack lib32-pipewire lib32-pipewire-jack libspa-bluetooth'  #pulseaudio pulseaudio-bluetooth pavucontrol ##pulseaudio-alsa alsa-utils , for wine use (lib32-libpulse lib32-alsa-plugins)
android='android-tools android-udev'
bluetooth='bluez bluez-utils bluez-plugins'
print='cups cups-pdf system-config-printer avahi'
xorg='xorg-server xorg-xinit xorg-xinit light numlockx libinput xorg-xinput xss-lock'
apps='telegram-desktop firefox feh calc fd bpytop adriconf' #for netwotk bmon
nvidiagraphics='nvidia-prime nvidia nvidia-utils lib32-nvidia-utils nvidia-settings'
hardwareacceleration='libva-mesa-driver mesa-vdpau intel-media-driver'
vulkan='vulkan-icd-loader lib32-vulkan-icd-loader lib32-mesa vulkan-intel lib32-vulkan-intel vulkan-mesa-layers'
filemanager='xed vifm pcmanfm tumbler raw-thumbnailer'
archive='file-roller atool bzip2 cpio gzip lha xz lzop p7zip tar unrar zip unzip'
media='celluloid mate-utils pantheon-screenshot simplescreenrecorder'
elogind=''
rc='ntp-openrc avahi-openrc cups-openrc bluez-openrc networkmanager-openrc'

BaseInstallation 
